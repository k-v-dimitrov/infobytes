// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FactCategories {
  history
  cinema
  technology
  art
  sport
  fashion
  science
  geography
}

model Fact {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title     String
  text      String
  sourceUrl String

  categoryType FactCategories?
  FactReview   FactReview[]
  Question     Question[]

  @@map("facts")
}

model Question {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  questionText String
  answers      Answer[]

  fact         Fact           @relation(fields: [factId], references: [id], onDelete: Cascade)
  factId       String
  UserQuestion UserQuestion[]

  @@map("questions")
}

model UserQuestion {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  givenAnswerId String?
  isCorrect     Boolean?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  question   Question @relation(fields: [questionId], references: [id])
  questionId String

  @@map("user_questions")
}

model Answer {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  answerText String
  isCorrect  Boolean

  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String

  @@map("answers")
}

model User {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  email    String @unique
  password String

  level       Int @default(1)
  levelPoints Int @default(0)

  displayName String  @default("")
  isOnboarded Boolean @default(false)

  FeedUser         FeedUser?
  ResetPassword    ResetPassword?
  UserFactCategory UserFactCategory[]
  FactReview       FactReview[]
  UserQuestion     UserQuestion[]

  @@map("users")
}

model FactReview {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fact   Fact   @relation(fields: [factId], references: [id])
  factId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@map("fact_reviews")
}

model UserFactCategory {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  category FactCategories

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@map("user_fact_categories")
}

model ResetPassword {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  User   User   @relation(fields: [userId], references: [id])
  userId String @unique

  @@map("reset_passwords")
}

model FeedUser {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User   @relation(fields: [user_id], references: [id])
  user_id String @unique

  @@map("feed_users")
}

model ViewedFact {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user_feed_id String
  fact_id      String

  @@unique([user_feed_id, fact_id], name: "userViewedFactIdentifier")
  @@index([user_feed_id])
  @@map("viewed_facts")
}
